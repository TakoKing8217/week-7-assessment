In runtime.js, there are two functions that serve the same purpose to duplicate all the numbers in a given string, doublerAppend and doublerInsert. doublerAppend used the built in function push() to double a number from the original string, then adds it to the end of the new array, new_nums. doublerInsert uses the opposite of push(), unshift(). Unshift takes whatever is bring "unshifted" and inserts it into the beginning of the new array. With small arrays, doublerInsert is comprable or sometimes even faster than doublerAppend, but as the numbers climb, doublerInsert starts to slow down dramatically. With each insertion with doublerInsert, it renames each item in each spot in the new array. The first item would have the location of "0", and the next would be "1" and so forth and so on. Since doublerInsert is putting an item into the location of "0", it is forcing "0" to be renamed as "1" and  then "1" as "2" all the way to the end of the array, and finally giving the last item a new number. With few items, this seems minimal, but as the arrays grow, doublerInsert needs to rename each and every item with just a single addition to the array, proving it to be ineffieient with time as the problems scale. doublerAppend on the other hand, gives the item a new id after the final item in the array. No renaming necessary, thus making it more efficient in the long run. Interestingly enough, for the items to do the same thing, you would have to reverse the array in doublerAppend to get the same results as doublerInsert, and it would still be faster in the higher numbers. Wild. 